
"use client";

import { useState } from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import { generatePresetFromDescription } from "@/ai/flows/generate-preset-from-description";
import { useAuth } from "@/components/auth-provider";
import { db } from "@/lib/firebase";
import { collection, addDoc, doc, getDoc } from "firebase/firestore";
import type { User } from "@/lib/types";
import Link from "next/link";


import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Textarea } from "@/components/ui/textarea";
import { Button } from "@/components/ui/button";
import { useToast } from "@/hooks/use-toast";
import { Bot, Sparkles, Copy, Loader2, AlertTriangle } from "lucide-react";
import { Badge } from "@/components/ui/badge";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";

const formSchema = z.object({
  description: z.string().min(10, {
    message: "Description must be at least 10 characters.",
  }),
});

export function AIPresetGenerator({ onSave }: { onSave?: () => void }) {
  const { user } = useAuth();
  const [generatedPreset, setGeneratedPreset] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const [isSaving, setIsSaving] = useState(false);
  const { toast } = useToast();
  const isPaidUser = user?.subscriptionPlan !== 'Free';

  const form = useForm<z.infer<typeof formSchema>>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      description: "",
    },
  });

  async function onSubmit(values: z.infer<typeof formSchema>) {
    setIsLoading(true);
    setGeneratedPreset("");

    try {
      const result = await generatePresetFromDescription({ description: values.description });
      setGeneratedPreset(result.preset);
      toast({
        title: "Preset Generated!",
        description: "Your new preset string is ready below.",
      });
    } catch (error: any) {
      console.error(error);
      toast({
        variant: "destructive",
        title: "Generation Failed",
        description: error?.message || "An unexpected error occurred.",
      });
    } finally {
      setIsLoading(false);
    }
  }

  const handleCopy = () => {
    if (!generatedPreset) return;
    navigator.clipboard.writeText(generatedPreset);
    toast({
      title: "Copied to clipboard!",
    });
  };
  
  const handleSave = async () => {
    if (!generatedPreset) return;
    if (!user) {
      toast({ variant: 'destructive', title: 'Authentication Error', description: 'You must be logged in to save a preset.' });
      return;
    }
    setIsSaving(true);
    try {
      const userDocRef = doc(db, 'users', user.uid);
      const userDocSnap = await getDoc(userDocRef);
      if (!userDocSnap.exists()) {
        throw new Error('User data not found.');
      }
      const userData = userDocSnap.data() as User;

      const presetsCollection = collection(db, 'users', user.uid, 'presets');
      await addDoc(presetsCollection, {
        name: `Untitled AI Preset`,
        description: 'A new preset generated by AI.',
        tags: [],
        presetString: generatedPreset,
        isPublic: false,
        isOfficial: false,
        authorId: user.uid,
        authorName: userData.name || 'Anonymous',
        downloadCount: 0,
      });

      toast({ title: 'Success!', description: 'Preset saved to "My Presets".' });
      if (onSave) onSave();
    } catch (error: any) {
      console.error("Error saving preset:", error);
      toast({ variant: 'destructive', title: 'Save Failed', description: 'An unexpected error occurred. Could not save the preset.' });
    } finally {
      setIsSaving(false);
    }
  };


  return (
    <Card>
      <Form {...form}>
        <form onSubmit={form.handleSubmit(onSubmit)}>
          <fieldset disabled={!isPaidUser}>
            <CardHeader>
              <CardTitle className="flex flex-wrap items-center gap-2">
                <div className="flex items-center gap-2">
                  <Bot /> AI Preset Generator
                </div>
                {!isPaidUser && (
                  <Badge variant="outline" className="border-primary text-primary">Premium</Badge>
                )}
              </CardTitle>
              <CardDescription>
                Describe the data you want to structure, and the AI will create a
                preset for you. e.g., "A list of books with title, author, and genre, exported as jsonl"
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              {!isPaidUser && (
                <Alert>
                    <AlertTriangle className="h-4 w-4" />
                    <AlertTitle>Premium Feature</AlertTitle>
                    <AlertDescription>
                        AI Preset Generation is a premium feature. <Link href="/pricing" className="font-bold text-primary hover:underline">Upgrade</Link> to generate presets from a description.
                    </AlertDescription>
                </Alert>
              )}
              <FormField
                control={form.control}
                name="description"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Data Description</FormLabel>
                    <FormControl>
                      <Textarea
                        placeholder="Describe your desired table structure and export format..."
                        {...field}
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              {generatedPreset && (
                <div className="space-y-2">
                  <FormLabel>Generated Preset</FormLabel>
                  <div className="relative">
                    <Textarea
                      readOnly
                      value={generatedPreset}
                      className="min-h-[150px] font-mono text-xs pr-10 break-all"
                    />
                    <Button
                      type="button"
                      variant="ghost"
                      size="icon"
                      className="absolute top-2 right-2 h-7 w-7"
                      onClick={handleCopy}
                    >
                      <Copy className="h-4 w-4" />
                    </Button>
                  </div>
                </div>
              )}
            </CardContent>
            <CardFooter className="flex justify-between">
              <Button type="button" variant="ghost" onClick={() => { form.reset(); setGeneratedPreset(""); }}>Clear</Button>
              <div className="flex gap-2">
              {generatedPreset && 
                <Button type="button" variant="outline" onClick={handleSave} disabled={isSaving}>
                  {isSaving && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
                  Save Preset
                </Button>
              }
              <Button type="submit" disabled={isLoading}>
                {isLoading ? (
                  <>
                    <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                    Generating...
                  </>
                ) : (
                  <>
                    <Sparkles className="mr-2 h-4 w-4" />
                    Generate
                  </>
                )}
              </Button>
              </div>
            </CardFooter>
          </fieldset>
        </form>
      </Form>
    </Card>
  );
}
